{"version":3,"sources":["../../src/metadata/ActionMetadata.ts"],"names":[],"mappings":";;AAKA,mDAAgD;AAEhD;IA0CI,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E,wBAAY,kBAAsC,EAAE,IAAwB;QACxE,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IAC1B,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E,sCAAa,GAAb,UAAc,MAAa;QACvB,OAAO,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IACzG,CAAC;IAMD,sBAAI,yCAAa;QAJjB,4EAA4E;QAC5E,YAAY;QACZ,4EAA4E;aAE5E;YACI,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,aAAa,IAAI,OAAA,aAAa,CAAC,IAAI,KAAK,yBAAW,CAAC,eAAe,EAAlD,CAAkD,CAAC,CAAC;QAClG,CAAC;;;OAAA;IAED,sBAAI,sCAAU;aAAd;YACI,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,aAAa,IAAI,OAAA,aAAa,CAAC,IAAI,KAAK,yBAAW,CAAC,YAAY,EAA/C,CAA+C,CAAC,CAAC;QAC/F,CAAC;;;OAAA;IAED,sBAAI,iDAAqB;aAAzB;YACI,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,aAAa,IAAI,OAAA,aAAa,CAAC,IAAI,KAAK,yBAAW,CAAC,yBAAyB,EAA5D,CAA4D,CAAC,CAAC;QAC5G,CAAC;;;OAAA;IAEL,qBAAC;AAAD,CA9EA,AA8EC,IAAA;AA9EY,wCAAc","file":"ActionMetadata.js","sourcesContent":["import {ParamMetadata} from \"./ParamMetadata\";\nimport {ActionMetadataArgs} from \"./args/ActionMetadataArgs\";\nimport {ActionType} from \"./types/ActionTypes\";\nimport {ControllerMetadata} from \"./ControllerMetadata\";\nimport {ResultMetadata} from \"./ResultMetadata\";\nimport {ResultTypes} from \"./types/ResultTypes\";\n\nexport class ActionMetadata {\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Action's controller.\n     */\n    controllerMetadata: ControllerMetadata;\n\n    /**\n     * Action's parameters.\n     */\n    params: ParamMetadata[];\n\n    /**\n     * Action's result handlers.\n     */\n    results: ResultMetadata[];\n\n    /**\n     * Message name served by this action.\n     */\n    name: string;\n\n    /**\n     * Class on which's method this action is attached.\n     */\n    target: Function;\n\n    /**\n     * Object's method that will be executed on this action.\n     */\n    method: string;\n\n    /**\n     * Action type represents http method used for the registered route. Can be one of the value defined in ActionTypes\n     * class.\n     */\n    type: ActionType;\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    \n    constructor(controllerMetadata: ControllerMetadata, args: ActionMetadataArgs) {\n        this.controllerMetadata = controllerMetadata;\n        this.name = args.name;\n        this.target = args.target;\n        this.method = args.method;\n        this.type = args.type;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    executeAction(params: any[]) {\n        return this.controllerMetadata.instance[this.method].apply(this.controllerMetadata.instance, params);\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    get emitOnSuccess() {\n        return this.results.find(resultHandler => resultHandler.type === ResultTypes.EMIT_ON_SUCCESS);\n    }\n\n    get emitOnFail() {\n        return this.results.find(resultHandler => resultHandler.type === ResultTypes.EMIT_ON_FAIL);\n    }\n\n    get skipEmitOnEmptyResult() {\n        return this.results.find(resultHandler => resultHandler.type === ResultTypes.SKIP_EMIT_ON_EMPTY_RESULT);\n    }\n\n}"],"sourceRoot":".."}