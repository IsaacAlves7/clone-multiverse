{"version":3,"sources":["../../src/decorators.ts"],"names":[],"mappings":"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","file":"decorators.js","sourcesContent":["import {defaultMetadataArgsStorage} from \"./index\";\nimport {SocketControllerMetadataArgs} from \"./metadata/args/SocketControllerMetadataArgs\";\nimport {ActionMetadataArgs} from \"./metadata/args/ActionMetadataArgs\";\nimport {ActionTypes} from \"./metadata/types/ActionTypes\";\nimport {ParamMetadataArgs} from \"./metadata/args/ParamMetadataArgs\";\nimport {ParamTypes} from \"./metadata/types/ParamTypes\";\nimport {ClassTransformOptions} from \"class-transformer\";\nimport {MiddlewareMetadataArgs} from \"./metadata/args/MiddlewareMetadataArgs\";\nimport {ResultMetadataArgs} from \"./metadata/args/ResultMetadataArgs\";\nimport {ResultTypes} from \"./metadata/types/ResultTypes\";\n\n/**\n * Registers a class to be a socket controller that can listen to websocket events and respond to them.\n *\n * @param namespace Namespace in which this controller's events will be registered.\n */\nexport function SocketController(namespace?: string | RegExp) {\n    return function (object: Function) {\n        const metadata: SocketControllerMetadataArgs = {\n            namespace: namespace,\n            target: object\n        };\n        defaultMetadataArgsStorage().controllers.push(metadata);\n    };\n}\n\n/**\n * Registers controller's action to be executed when socket receives message with given name.\n */\nexport function OnMessage(name?: string): Function {\n    return function (object: Object, methodName: string) {\n        const metadata: ActionMetadataArgs = {\n            name: name,\n            target: object.constructor,\n            method: methodName,\n            type: ActionTypes.MESSAGE\n        };\n        defaultMetadataArgsStorage().actions.push(metadata);\n    };\n}\n\n/**\n * Registers controller's action to be executed when client connects to the socket.\n */\nexport function OnConnect(): Function {\n    return function (object: Object, methodName: string) {\n        const metadata: ActionMetadataArgs = {\n            target: object.constructor,\n            method: methodName,\n            type: ActionTypes.CONNECT\n        };\n        defaultMetadataArgsStorage().actions.push(metadata);\n    };\n}\n\n/**\n * Registers controller's action to be executed when client disconnects from the socket.\n */\nexport function OnDisconnect(): Function {\n    return function (object: Object, methodName: string) {\n        const metadata: ActionMetadataArgs = {\n            target: object.constructor,\n            method: methodName,\n            type: ActionTypes.DISCONNECT\n        };\n        defaultMetadataArgsStorage().actions.push(metadata);\n    };\n}\n\n/**\n * Injects connected client's socket object to the controller action.\n */\nexport function ConnectedSocket() {\n    return function (object: Object, methodName: string, index: number) {\n        let format = (Reflect as any).getMetadata(\"design:paramtypes\", object, methodName)[index];\n        const metadata: ParamMetadataArgs = {\n            target: object.constructor,\n            method: methodName,\n            index: index,\n            type: ParamTypes.CONNECTED_SOCKET,\n            reflectedType: format\n        };\n        defaultMetadataArgsStorage().params.push(metadata);\n    };\n}\n\n/**\n * Injects socket.io object that initialized a connection.\n */\nexport function SocketIO() {\n    return function (object: Object, methodName: string, index: number) {\n        let format = (Reflect as any).getMetadata(\"design:paramtypes\", object, methodName)[index];\n        const metadata: ParamMetadataArgs = {\n            target: object.constructor,\n            method: methodName,\n            index: index,\n            type: ParamTypes.SOCKET_IO,\n            reflectedType: format\n        };\n        defaultMetadataArgsStorage().params.push(metadata);\n    };\n}\n\n/**\n * Injects received message body.\n */\nexport function MessageBody(options?: {classTransformOptions?: ClassTransformOptions}) {\n    return function (object: Object, methodName: string, index: number) {\n        let format = (Reflect as any).getMetadata(\"design:paramtypes\", object, methodName)[index];\n        const metadata: ParamMetadataArgs = {\n            target: object.constructor,\n            method: methodName,\n            index: index,\n            type: ParamTypes.SOCKET_BODY,\n            reflectedType: format,\n            classTransformOptions: options && options.classTransformOptions ? options.classTransformOptions : undefined\n        };\n        defaultMetadataArgsStorage().params.push(metadata);\n    };\n}\n\n/**\n * Injects query parameter from the received socket request.\n */\nexport function SocketQueryParam(name?: string) {\n    return function (object: Object, methodName: string, index: number) {\n        let format = (Reflect as any).getMetadata(\"design:paramtypes\", object, methodName)[index];\n        const metadata: ParamMetadataArgs = {\n            target: object.constructor,\n            method: methodName,\n            index: index,\n            type: ParamTypes.SOCKET_QUERY_PARAM,\n            reflectedType: format,\n            value: name\n        };\n        defaultMetadataArgsStorage().params.push(metadata);\n    };\n}\n\n/**\n * Injects socket id from the received request.\n */\nexport function SocketId() {\n    return function (object: Object, methodName: string, index: number) {\n        let format = (Reflect as any).getMetadata(\"design:paramtypes\", object, methodName)[index];\n        const metadata: ParamMetadataArgs = {\n            target: object.constructor,\n            method: methodName,\n            index: index,\n            type: ParamTypes.SOCKET_ID,\n            reflectedType: format\n        };\n        defaultMetadataArgsStorage().params.push(metadata);\n    };\n}\n\n/**\n * Injects request object received by socket.\n */\nexport function SocketRequest() {\n    return function (object: Object, methodName: string, index: number) {\n        let format = (Reflect as any).getMetadata(\"design:paramtypes\", object, methodName)[index];\n        const metadata: ParamMetadataArgs = {\n            target: object.constructor,\n            method: methodName,\n            index: index,\n            type: ParamTypes.SOCKET_REQUEST,\n            reflectedType: format\n        };\n        defaultMetadataArgsStorage().params.push(metadata);\n    };\n}\n\n/**\n * Injects parameters of the connected socket namespace.\n */\nexport function NspParams() {\n    return function (object: Object, methodName: string, index: number) {\n        let format = (Reflect as any).getMetadata(\"design:paramtypes\", object, methodName)[index];\n        const metadata: ParamMetadataArgs = {\n            target: object.constructor,\n            method: methodName,\n            index: index,\n            type: ParamTypes.NAMESPACE_PARAMS,\n            reflectedType: format\n        };\n        defaultMetadataArgsStorage().params.push(metadata);\n    };\n}\n\n/**\n * Injects named param from the connected socket namespace.\n */\nexport function NspParam(name: string) {\n    return function (object: Object, methodName: string, index: number) {\n        let format = (Reflect as any).getMetadata(\"design:paramtypes\", object, methodName)[index];\n        const metadata: ParamMetadataArgs = {\n            target: object.constructor,\n            method: methodName,\n            index: index,\n            type: ParamTypes.NAMESPACE_PARAM,\n            reflectedType: format,\n            value: name\n        };\n        defaultMetadataArgsStorage().params.push(metadata);\n    };\n}\n\n/**\n * Injects rooms of the connected socket client.\n */\nexport function SocketRooms() {\n    return function (object: Object, methodName: string, index: number) {\n        let format = (Reflect as any).getMetadata(\"design:paramtypes\", object, methodName)[index];\n        const metadata: ParamMetadataArgs = {\n            target: object.constructor,\n            method: methodName,\n            index: index,\n            type: ParamTypes.SOCKET_ROOMS,\n            reflectedType: format\n        };\n        defaultMetadataArgsStorage().params.push(metadata);\n    };\n}\n\n/**\n * Registers a new middleware to be registered in the socket.io.\n */\nexport function Middleware(options?: {priority?: number}): Function {\n    return function (object: Function) {\n        const metadata: MiddlewareMetadataArgs = {\n            target: object,\n            priority: options && options.priority ? options.priority : undefined\n        };\n        defaultMetadataArgsStorage().middlewares.push(metadata);\n    };\n}\n\n/**\n * If this decorator is set then after controller action will emit message with the given name after action execution.\n * It will emit message only if controller succeed without errors.\n * If result is a Promise then it will wait until promise is resolved and emit a message.\n */\nexport function EmitOnSuccess(messageName: string, options?: {classTransformOptions?: ClassTransformOptions}): Function {\n    return function (object: Object, methodName: string) {\n        const metadata: ResultMetadataArgs = {\n            target: object.constructor,\n            method: methodName,\n            type: ResultTypes.EMIT_ON_SUCCESS,\n            value: messageName,\n            classTransformOptions: options && options.classTransformOptions ? options.classTransformOptions : undefined\n        };\n        defaultMetadataArgsStorage().results.push(metadata);\n    };\n}\n\n/**\n * If this decorator is set then after controller action will emit message with the given name after action execution.\n * It will emit message only if controller throw an exception.\n * If result is a Promise then it will wait until promise throw an error and emit a message.\n */\nexport function EmitOnFail(messageName: string, options?: {classTransformOptions?: ClassTransformOptions}): Function {\n    return function (object: Object, methodName: string) {\n        const metadata: ResultMetadataArgs = {\n            target: object.constructor,\n            method: methodName,\n            type: ResultTypes.EMIT_ON_FAIL,\n            value: messageName,\n            classTransformOptions: options && options.classTransformOptions ? options.classTransformOptions : undefined\n        };\n        defaultMetadataArgsStorage().results.push(metadata);\n    };\n}\n\n/**\n * Used in conjunction with @EmitOnSuccess and @EmitOnFail decorators.\n * If result returned by controller action is null or undefined then messages will not be emitted by @EmitOnSuccess\n * or @EmitOnFail decorators.\n */\nexport function SkipEmitOnEmptyResult(): Function {\n    return function (object: Object, methodName: string) {\n        const metadata: ResultMetadataArgs = {\n            target: object.constructor,\n            method: methodName,\n            type: ResultTypes.SKIP_EMIT_ON_EMPTY_RESULT\n        };\n        defaultMetadataArgsStorage().results.push(metadata);\n    };\n}"],"sourceRoot":"."}